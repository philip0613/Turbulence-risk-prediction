import requests
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt


# 기상청 API 호출
def fetch_kma_satellite_data(api_key, base_date, base_time, nx, ny):
    url = (
        "http://apis.data.go.kr/1360000/WthrSatlitInfoService/getGk2aIrAll"
        f"?serviceKey={api_key}"
        f"&pageNo=1"
        f"&numOfRows=10"
        f"&dataType=JSON"
        f"&base_date={base_date}"
        f"&base_time={base_time}"
        f"&nx={nx}&ny={ny}"
    )
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if 'response' in data and 'body' in data['response']:
            return data['response']['body']['items']['item']
        else:
            return None
    else:
        print(f"[기상청 API] 호출 실패: {response.status_code}")
        return None


# Open-Meteo API 호출
def fetch_open_meteo_data(lat, lon):
    url = (
        f"https://api.open-meteo.com/v1/forecast"
        f"?latitude={lat}&longitude={lon}"
        f"&hourly=temperature_2m,wind_speed_10m,pressure_msl"
    )
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        df = pd.DataFrame(data["hourly"])
        df["time"] = pd.to_datetime(data["hourly"]["time"])
        return df
    else:
        print(f"[Open-Meteo API] 호출 실패: {response.status_code}")
        return None


# 난기류 위험도 계산
def calculate_turbulence_risk(wind_speed, pressure, temperature):
    risk = (
        np.abs(wind_speed) * 0.01 +
        np.abs(pressure - 1013) * 0.001 +
        np.abs(temperature) * 0.005
    )
    return np.clip(risk, 0, 1)


# PINN 모델 정의
class PINN(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(PINN, self).__init__()
        self.network = nn.Sequential(
            nn.Linear(input_dim, hidden_dim),
            nn.Tanh(),
            nn.Linear(hidden_dim, hidden_dim),
            nn.Tanh(),
            nn.Linear(hidden_dim, output_dim),
        )

    def forward(self, x):
        return self.network(x)


# Navier-Stokes 기반 손실 함수 (미분 값 출력 추가)
def navier_stokes_loss(model, inputs):
    inputs.requires_grad_(True)
    u = model(inputs)

    # 미분 계산
    u_grad = torch.autograd.grad(u, inputs, grad_outputs=torch.ones_like(u), create_graph=True, retain_graph=True)[0]
    u_x = u_grad[:, 0]
    u_y = u_grad[:, 1]
    u_t = u_grad[:, 2]

    # 디버깅: 미분 값 출력
    print(f"u_x: {u_x.mean().item()}, u_y: {u_y.mean().item()}, u_t: {u_t.mean().item()}")

    # Navier-Stokes 방정식 기반 손실
    loss = torch.mean((u_t + u * u_x + u * u_y) ** 2)
    return loss


# 데이터 손실 함수
def data_loss(predictions, targets):
    return torch.mean((predictions - targets) ** 2)


# PINN 학습 함수 (모든 손실 출력)
def train_pinn_with_visualization(model, optimizer, inputs, targets, epochs=1000, physics_weight=1.0):
    loss_history = {"total_loss": [], "data_loss": [], "physics_loss": []}

    for epoch in range(epochs):
        model.train()
        optimizer.zero_grad()

        # 모델 예측
        predictions = model(inputs)

        # 손실 계산
        loss_data = data_loss(predictions, targets)
        loss_physics = navier_stokes_loss(model, inputs) * physics_weight
        total_loss = loss_data + loss_physics

        # 손실 저장
        loss_history["total_loss"].append(total_loss.item())
        loss_history["data_loss"].append(loss_data.item())
        loss_history["physics_loss"].append(loss_physics.item())

        # 역전파 및 업데이트
        total_loss.backward()
        optimizer.step()

        # 모든 손실 출력
        print(f"Epoch {epoch}, Total Loss: {total_loss.item():.6f}, Data Loss: {loss_data.item():.6f}, Physics Loss: {loss_physics.item():.6f}")

    return loss_history


# 학습 손실 시각화
def plot_loss_history(loss_history):
    plt.figure(figsize=(10, 6))
    plt.plot(loss_history["total_loss"], label="Total Loss", linestyle="-")
    plt.plot(loss_history["data_loss"], label="Data Loss", linestyle="--")
    plt.plot(loss_history["physics_loss"], label="Physics Loss", linestyle=":")
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    plt.title("Loss History During PINN Training")
    plt.legend()
    plt.grid()
    plt.show()


# 위험도 비교 시각화
def plot_risk_comparison(data_based_risk, pinn_based_risk):
    risks = [data_based_risk, pinn_based_risk]
    labels = ["Data-based Risk", "PINN-based Risk"]
    plt.figure(figsize=(6, 4))
    plt.bar(labels, risks, color=["blue", "green"], alpha=0.7)
    plt.ylabel("Risk")
    plt.title("Comparison of Risk Predictions")
    plt.ylim(0, 1)  # 난기류 위험도 범위는 0~1
    plt.grid(axis="y")
    plt.show()


if __name__ == "__main__":
    # API 인증키 및 기본 정보
    kma_api_key = "Rg%2F7yBxfyhK0akYfZ66Fjt0n9VFIyEQncx%2FXn2WQQ1hKMSSxKB6MmE8jsPam%2FOa186%2Frm%2Fb7MLtGZ8Gmut%2B8JA%3D%3D"
    base_date = "20241213"
    base_time = "0600"
    latitude, longitude = 37.5665, 126.9780

    # 기상청 데이터 가져오기
    nx, ny = 60, 127  # 격자 좌표 (서울)
    kma_data = fetch_kma_satellite_data(kma_api_key, base_date, base_time, nx, ny)

    # Open-Meteo 데이터 가져오기
    open_meteo_data = fetch_open_meteo_data(latitude, longitude)

    if open_meteo_data is not None:
        # 데이터 기반 위험도 계산
        first_row = open_meteo_data.iloc[0]
        wind_speed = first_row["wind_speed_10m"]
        pressure = first_row["pressure_msl"]
        temperature = first_row["temperature_2m"]

        risk_data_based = calculate_turbulence_risk(wind_speed, pressure, temperature)
        print(f"Data-based Risk: {risk_data_based:.2f}")

        # PINN 학습 및 시각화
        inputs = torch.tensor([
            [latitude, longitude, 0.0],
            [latitude + 0.1, longitude + 0.1, 1.0],
            [latitude - 0.1, longitude - 0.1, 2.0],
            [latitude + 0.2, longitude + 0.2, 3.0],
            [latitude - 0.2, longitude - 0.2, 4.0],
            [latitude + 0.3, longitude + 0.3, 5.0],
            [latitude - 0.3, longitude - 0.3, 6.0],
        ], requires_grad=True)

        targets = torch.tensor([
            [risk_data_based],
            [risk_data_based * 1.2],
            [risk_data_based * 0.8],
            [risk_data_based * 1.1],
            [risk_data_based * 0.9],
            [risk_data_based * 1.3],
            [risk_data_based * 0.7],
        ])

        pinn_model = PINN(input_dim=3, hidden_dim=20, output_dim=1)
        optimizer = optim.Adam(pinn_model.parameters(), lr=1e-3)

        # 학습 및 손실 기록
        loss_history = train_pinn_with_visualization(
            pinn_model, optimizer, inputs, targets, epochs=1000, physics_weight=1.0
        )

        # PINN 기반 예측
        pinn_model.eval()
        with torch.no_grad():
            pinn_risk = pinn_model(inputs).mean().item()
        print(f"PINN-based Risk: {pinn_risk:.2f}")

        # 손실 시각화
        plot_loss_history(loss_history)

        # 위험도 비교 시각화
        plot_risk_comparison(risk_data_based, pinn_risk)
